@page "/AddTask"
@using BlazorSep3.model
@using BlazorSep3.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITaskServices taskServices;

<header></header>
<div class="content">
    <TaskNavSide/>
    <main class="content-view">
        <div class="form">
            <div class="form-header">
                <h2>
                    Add new task
                </h2>
            </div>
            <div>
                <span class="error-message">@errorMessage</span>
            </div>

            <div class="form_parts">
                <div class="form_part1">
                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-pencil"/>
                        </div>
                        <div>
                            <label class="form__label">Title</label>
                            <input type="text" class="form__input" placeholder="Title" @bind="@task.Title">
                        </div>

                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-briefcase"/>
                        </div>
                        <div>
                            <label class="form__label">Description</label>
                            <input type="text" class="form__input" placeholder="Description" @bind="task.Description">
                        </div>
                    </div>

                    <div class="form__group">
                        <div class="form__group">
                            <div class="icon">
                                <span class="oi oi-person"/>
                            </div>
                            <div>
                                <div>
                                    <label class="form__label">Speciality</label>
                                    <button @onclick="@(() => ShowEditSpecialities())" class="btn btn-primary">Add Specialities</button>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>


                <div class="form_part2">
                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-calendar"/>
                        </div>
                        <div>
                            <label class="form__label">StartDate</label>
                            <input type="date" class="form__input" placeholder="StartDate" @bind="task.StartDate"
                                   min=@DateTime.Today>
                        </div>
                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-calculator"/>
                        </div>
                        <div>
                            <label class="form__label">Estimate</label>
                            <input type="number" class="form__input" placeholder="Estimate" @bind="task.Estimate"
                                   min="1">
                        </div>
                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-calendar"/>
                        </div>
                        <div>
                            <label class="form__label">Deadline</label>
                            <input type="date" class="form__input" placeholder="Deadline" @bind="task.Deadline"
                                   min=@DateTime.Today.AddDays(1)>
                        </div>
                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-pencil"/>
                        </div>
                        <div>
                            <label class="form__label">Status</label>

                            <select name="specialties" class="form__input_select" @bind="task.Status">
                                @foreach (var status in Enum.GetValues(typeof(Status)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        </div>

                    </div>
                </div>

            </div>
            <div class="form__group">
                <button class="button-white" type="submit" @onclick="AddTaskk">Add Task</button>
            </div>
        </div>

    </main>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    public List<Speciality> specList ;
  

    private string errorMessage;
    
    private Taskk task = new Taskk();

    [Range(1, int.MaxValue)] private int currentPeople = 1;


    private async Task AddTaskk()
    {
        try
        {
            await AddToSpecialties();
            Console.WriteLine(task);
            await taskServices.AddTask(task);
            errorMessage = "";
            NavigationManager.NavigateTo("/ManageTask");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorMessage = e.Message;
        }
    }
    
    async Task ShowEditSpecialities()
    {
        var parameters = new ModalParameters();
        parameters.Add("Specialities", task.Specialities);
        
        var modelResult = Modal.Show<EditTaskSpecialties>("Add Task's Specialties", parameters);
        var result = await modelResult.Result;
        specList = (List<Speciality>) result.Data;
        
    }
    
    private async Task AddToSpecialties()
    {
        foreach (var s in specList)
        {
            if (!task.Specialities.ContainsKey(s.name))
            {
                task.Specialities.Add(s.name, s.requirednumber);
            } 
        }
        
    }



    protected override void OnInitialized()
    {
        task.StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        task.Deadline = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day).AddDays(7);
        task.Estimate = 1;
    }
    

}