@page "/ViewAllTasks"
@using BlazorSep3.model
@using BlazorSep3.Data
@inject NavigationManager NavigationManager
@inject ITaskServices taskServices;
@inject IJSRuntime _jsRuntime;

<div class="content">
    <TaskNavSide/>
    <main class="content-view">
        <div class="filter_option">
            <div class="form__group">
                <div class="form__group-title">
                    <span class="icon oi oi-calendar"/>
                    <label class="form__label">StartDate</label>
                </div>
                <input type="date" class="form__input" placeholder="StartDate"
                       @bind="@startTime" min=@DateTime.Today>
            </div>
            <div class="form__group">
                <div class="form__group-title">
                    <span class="icon oi oi-calendar"/>
                    <label class="form__label">Deadline</label>
                </div>
                <input type="date" class="form__input" placeholder="Deadline"
                       @bind="@deadline" min=@DateTime.Today.AddDays(1)>
            </div>
            <div class="form__group">
                <div class="form__group-title">
                    <span class="icon oi oi-person"/>
                    <label class="form__label">Status</label>
                </div>
                <div>
                    <select name="specialties" class="form__input_select" @bind="status">
                        @foreach (var status in Enum.GetValues(typeof(Status)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form__group">
                <div class="form__group-title">
                    <span class="icon oi oi-pencil"></span>
                    <label class="form__label">Is important</label>
                </div>
                <input type="checkbox" class="form__radio-input" @bind="@isImportant"/>
            </div>

            <div class="form__group">
                <button class="button-spec" type="submit" @onclick="Filter">Filter</button>
            </div>

            <form action="#" class="form__group_search">
                <input type="text" class="search_input" placeholder="Search tasks" @oninput="@((arg) => FilterByName(arg))">
                @*<button class="search_button" @onclick="">
                    <span class="icon oi oi-magnifying-glass">Search</span>
                </button>*@
            </form>

        </div>
        <div class="search_result">

            @if (tasksToShow == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!tasksToShow.Any())
            {
                <p>
                    <em>No Tasks to show. </em>
                </p>
            }
            else
            {
                <table class="table table-hover">
                    <thead style="position: sticky;top:0" class="thead-dark">
                    <tr >
                        <th  >Title</th>
                        <th  >Description</th>
                        <th  >Start Date</th>
                        <th >Estimate</th>
                        <th  >Deadline</th>
                        <th  >Status</th>
                        <th >Number of employees</th>
                        <th>Edit</th>
                        <th>Remove</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in tasksToShow)
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.Description</td>
                            <td>@item.StartDate.ToString("dd MMMM yyyy")</td>
                            <td>@item.Estimate</td>
                            <td>@item.Deadline.ToString("dd MMMM yyyy")</td>
                            <td>@item.Status</td>
                            <td>@item.GetFinalNumberOfPeople()</td>
                            
                            <td>
                                <button @onclick="@(() => Edit(item.id))">
                                    <i class="oi oi-pencil" style="color:#1b6ec2"/>
                                </button>
                            </td>
                            <td>
                                <button @onclick="@(() => Remove(item.id))">
                                    <i class="oi oi-delete" style="color:red"/>
                                </button>
                            </td>
                        </tr>
                    }

                    </tbody>
                </table>
            }
        </div>
    </main>
</div>

@code {
    private IList<Taskk> tasksToShow;
    private IList<Taskk> tasks;
    private string? filterByName;

    private DateTime? startTime { get; set; }
    private DateTime? deadline { get; set; }
    private bool? isImportant { get; set; }
    private Status? status { get; set; }

    private async Task Filter()
    {
        tasks = await taskServices.GetTasks(startTime, deadline, isImportant, status);
        tasksToShow = tasks;
    }


    private void FilterByName(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        tasksToShow = tasks.Where(t => filterByName != null && (t.Title.ToLower().Contains(filterByName.ToLower()) || t.Description.ToLower().Contains(filterByName.ToLower())) || filterByName == null).ToList();
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/EditTask{id}");
    }
    
    private void Remove(int id)
    {
        taskServices.RemoveTask(id);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(isImportant);
    }

}