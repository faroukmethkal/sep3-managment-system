@page "/MyTasks"
@using BlazorSep3.model
@using BlazorSep3.Data
@inject NavigationManager NavigationManager
@inject ITaskServices taskServices;
@inject IJSRuntime _jsRuntime;


<div class="content">
    <TaskEmployeeNavSide />
    <main class="content-view">
        <div class="filter_option">
            <div class="form__group">
                <div class="form__group-title">
                    <span class="icon oi oi-person"/>
                    <label class="form__label">Status</label>
                </div>
                <div>
                    <select name="specialties" class="form__input_select" @bind="status">
                        @foreach (var status in Enum.GetValues(typeof(Status)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form__group">
                <button class="button-spec" type="submit" @onclick="Filter">Filter</button>
            </div>

            <form action="#" class="form__group_search">
                <input type="text" class="search_input" placeholder="Search tasks" @oninput="@((arg) => FilterByName(arg))">
               
            </form>

        </div>
        <div class="search_result">

            @if (tasksToShow == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!tasksToShow.Any())
            {
                <p>
                    <em>No Tasks to show. </em>
                </p>
            }
            else
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th>Title</th>
                        <th>Start Date</th>
                        <th>Estimate</th>
                        <th>Progress</th>
                        <th>Add Hours</th>
                        <th>Deadline</th>
                        <th>Status</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in tasksToShow)
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.StartDate</td>
                            <td>@item.Estimate</td>
                            <td>
                                <p>
                                    @item.SpentHours/@item.Estimate
                                    <progress value="@item.SpentHours" max="@item.Estimate"></progress>
                                    @CalculatePercentage(item.SpentHours, item.Estimate)
                                </p>
                            </td>
                            <td>
                                <button @onclick="@(() => AddHoursSpent(item))" class="oi oi-plus" style="color:green"></button>
                            </td>
                            <td>@item.Deadline</td>
                            <td>
                                <button @onclick="@(() => ChangeStatus(item))" class="btn btn-secondary">
                                    @item.Status
                                </button>
                            </td>                     
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </main>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private IList<Taskk> tasksToShow;
    private IList<Taskk> tasks;
    private string? filterByName;
    private double hours;
    private int idToChange;

    private Status? status { get; set; }

    private async Task Filter()
    {
        tasks = await taskServices.GetAllMyTasks(status);
        tasksToShow = tasks;
    }


    private void FilterByName(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private double CalculatePercentage(double hours, double estimate)
    {
        return hours / estimate * 100;
    }

    private async Task AddHoursSpent(Taskk task)
    {
        var parameters = new ModalParameters();
        parameters.Add("taskId", task.id);
        var modelResult = Modal.Show<AddHoursToTask>("Add time spent on task: "+ task.id, parameters);
    }
    private async void ChangeStatus(Taskk task)
    {
        var parameters = new ModalParameters();
        parameters.Add("Task", task);
        var modelResult =Modal.Show<ChangeStatus>("Change Status of task: "+task.Title, parameters);
        var result = await modelResult.Result;
        Taskk taskResult = (Taskk) result.Data;
        
        foreach (var t in tasksToShow)
        {
            if (t.id == taskResult.id) t.Status = taskResult.Status;
        }

        tasks = tasksToShow;
    }

    private void ExecuteFilter()
    {
        tasksToShow = tasks.Where(t => filterByName != null && (t.Title.ToLower().Contains(filterByName.ToLower()) || t.Description.ToLower().Contains(filterByName.ToLower())) || filterByName == null).ToList();
    }
    /*protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(isImportant);
    }*/

}