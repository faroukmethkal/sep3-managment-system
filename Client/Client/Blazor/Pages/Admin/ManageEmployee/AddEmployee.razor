@page "/AddEmployee"
@using Microsoft.AspNetCore.Components

@using Task = System.Threading.Tasks.Task
@using System.Text
@using Blazor.Data
@using Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceUser _serviceUser;


<div class="content">
    <EmployeeSideNav/>

    <main class="content-view">
        <div class="form">
            <div class="form-header">
                <h2>
                    Add new profile
                </h2>
            </div>
            <div>
                <span class="error-message">@errorMessage</span>
            </div>

            <div class="form_parts">
                <div>
                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-person"/>
                        </div>
                        <div>
                            <label for="name" class="form__label">First name</label>
                            <input type="text" class="form__input" placeholder="First name" @bind="@profile.FirstName">

                        </div>

                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-person"/>
                        </div>
                        <div>
                            <label class="form__label">Last name</label>
                            <input type="text" class="form__input" placeholder="Last name" @bind="profile.LastName">

                        </div>

                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-calendar"/>
                        </div>
                        <div>
                            <label class="form__label">Birthday</label>
                            <input type="date" class="form__input" placeholder="Birthday" @bind="profile.Birthday"
                                   min="1990-01-01">

                        </div>

                    </div>
                </div>
                <div>
                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-pencil"/>
                        </div>
                        <div>
                            <label class="form__label">Specialities</label>

                            <select name="specialties" class="form__input_select" @bind="profile.Specialities">
                                @foreach (var speciality in Enum.GetValues(typeof(Specialities)))
                                {
                                    <option value="@speciality">@splitOnCapitalLetter(speciality.ToString())</option>
                                }
                            </select>
                        </div>

                    </div>

                    <div class="form__group">
                        <div class="icon">
                            <span class="oi oi-pencil"/>
                        </div>
                        <div>
                            <label class="form__label">Role</label>
                            <select name="role" class="form__input_select" rows="1" @bind="profile.Role">
                                <option value="@Role.fullTimeEmployee">Full-Time Employee</option>
                                <option value="@Role.partTimeEmployee">Part-time Employee</option>
                            </select>

                        </div>

                    </div>
                    <div class="form__group">
                        <button class="button-white" type="submit" @onclick="PerformRegister">Add profile</button>
                    </div>
                </div>
                
            </div>
        </div>
    </main>
</div>

@code {

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private string errorMessage;
    private Profile profile = new Profile();

    private async Task PerformRegister()
    {
        try
        {
            await _serviceUser.RegisterUser(profile);
            errorMessage = "";
            NavigationManager.NavigateTo("/ManageEmployee");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorMessage = e.Message;
        }
    }

    protected override void OnInitialized()
    {
        profile.Birthday = new DateTime(1980, 1, 1);
    }

    private string splitOnCapitalLetter(string s)
    {
        StringBuilder builder = new StringBuilder();
        s.First().ToString().ToUpper();
        foreach (char c in s)
        {
            if (Char.IsUpper(c) && builder.Length > 0) builder.Append(' ');
            builder.Append(c);
        }
        string newString = builder.ToString();
        string newsCapitalizeFirstLetter = char.ToUpper(newString[0]) + newString.Substring(1);
        return newsCapitalizeFirstLetter;
    }

}